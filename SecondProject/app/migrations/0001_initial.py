# Generated by Django 5.2.3 on 2025-09-12 11:25

import app.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Bb",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=50)),
                ("content", models.TextField(blank=True, default=None, null=True)),
                ("price", models.IntegerField(blank=True, null=True)),
                (
                    "kind",
                    models.CharField(
                        blank=True,
                        choices=[("b", "buy"), ("s", "sell"), ("t", "trade")],
                        max_length=1,
                    ),
                ),
                (
                    "kind2",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "Choose type of published announcement"),
                            ("b", "Buy"),
                            ("s", "Sell"),
                            ("t", "Trade"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "kind3",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[(1, "Buy"), (2, "Sell"), (3, "Trade")],
                        default=2,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Machine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="Measure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "measurement",
                    models.FloatField(
                        choices=[(1.0, "METERS"), (0.3048, "FEET"), (0.9144, "YARDS")]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Rubric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=50)),
                ("show", models.BooleanField(default=False)),
                ("order", models.SmallIntegerField(db_index=True, default=0)),
            ],
            options={
                "db_table": "rubric",
                "ordering": ("order", "name"),
            },
        ),
        migrations.CreateModel(
            name="Spare",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="SuperRubric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="AdvUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_activated", models.BooleanField(default=True)),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Invalid email"
                            )
                        ],
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("comment", models.CharField(max_length=200)),
                (
                    "bb",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="app.bb",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Kit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("count", models.IntegerField()),
                (
                    "machine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.machine"
                    ),
                ),
                (
                    "spare",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.spare"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="bb",
            name="rubric",
            field=models.ForeignKey(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="entries",
                to="app.rubric",
            ),
        ),
        migrations.CreateModel(
            name="RevRubric",
            fields=[],
            options={
                "ordering": ["-name"],
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("app.rubric",),
        ),
        migrations.AddField(
            model_name="machine",
            name="spares",
            field=models.ManyToManyField(
                through="app.Kit", through_fields=("machine", "spare"), to="app.spare"
            ),
        ),
        migrations.AddField(
            model_name="rubric",
            name="super_rubric",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="super_rubric",
                to="app.superrubric",
            ),
        ),
        migrations.CreateModel(
            name="PrivateMessage",
            fields=[
                (
                    "message_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.message",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=("app.message",),
        ),
        migrations.CreateModel(
            name="PrivateMessage1",
            fields=[
                (
                    "message_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.message",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=("app.message",),
        ),
        migrations.CreateModel(
            name="Magazine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        error_messages={"invalid": "Incorrectly name"}, max_length=30
                    ),
                ),
                ("published", models.DateTimeField(auto_now_add=True)),
                ("price", models.FloatField(default=0)),
                (
                    "rubric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="app.rubric"
                    ),
                ),
            ],
            options={
                "ordering": ["-published", "title"],
                "get_latest_by": "published",
                "indexes": [
                    models.Index(
                        condition=models.Q(("price__lte", 1000)),
                        fields=["title"],
                        name="app_magazine_main",
                    )
                ],
                "unique_together": {("title", "price"), ("title", "published")},
            },
        ),
        migrations.CreateModel(
            name="Board",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=50)),
                ("price", models.IntegerField(blank=True, null=True)),
                (
                    "rubric",
                    models.ForeignKey(
                        limit_choices_to={"show": True},
                        on_delete=models.SET(app.models.Rubric.get_first_rubric),
                        related_query_name="entry",
                        to="app.rubric",
                    ),
                ),
            ],
            options={
                "order_with_respect_to": "rubric",
            },
        ),
    ]
